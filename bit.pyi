""" Stub file for the BIT class. """
from typing import MutableSequence, TypeVar, Callable, Iterable, List


# Can be anything.
_T = TypeVar('_T')
# binary operator. Take two values of same type and return
# value of same type.
_BinOp = Callable[[_T, _T], _T]


# Ignore some lints locally.
# pylint: disable=C0321, W0613, R0201, C0111
class BIT(MutableSequence[_T]):
    """ Based on typeshed/stdlib/collections/__init__.pyi. """
    _st: List[_T]
    binor: _BinOp

    def __init__(self, iterable: Iterable[_T], binary_op: _BinOp) -> None: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, index: int) -> _T: ...
    def __setitem__(self, index: int, value: _T) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __len__(self) -> int: ...
    def append(self, value: _T) -> None: ...
    def insert(self, index: int, value: _T) -> None: ...
    def original_layout(self) -> List[_T]: ...

    @staticmethod
    def bit_layout(iterable: Iterable[_T], binary_op: _BinOp) -> List[_T]: ...
